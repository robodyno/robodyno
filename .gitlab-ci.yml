# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages: # List of stages for jobs, and their order of execution
  - deploy

deploy-python:
  stage: deploy
  tags:
    - docker
  only:
    - main
  image: python:latest
  script:
    - pip install -i https://pypi.tuna.tsinghua.edu.cn/simple twine
    - python setup.py sdist bdist_wheel
    - python -m twine upload --repository $PYPI_URL --username $PYPI_USERNAME --password $PYPI_PASSWORD dist/*

deploy-python-devel:
  stage: deploy
  tags:
    - docker
  only:
    - devel
  image: python:latest
  script:
    - pip install -i https://pypi.tuna.tsinghua.edu.cn/simple twine
    - python setup.py sdist bdist_wheel
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*

deploy-doc:
  stage: deploy
  tags:
    - docker
  only:
    - main
  image: python:latest
  before_script:
    - mkdir -p /root/.ssh && chmod 700 /root/.ssh
    - echo "$SSH_PRIVATE_KEY" > /root/.ssh/id_rsa
    - chmod 600 /root/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-keyscan $SSH_HOST >> /root/.ssh/known_hosts
    - ssh-add /root/.ssh/id_rsa
    - pip install -i https://pypi.tuna.tsinghua.edu.cn/simple -r docs/requirements.txt
    - pip install -i https://pypi.tuna.tsinghua.edu.cn/simple .
  script:
    - git remote set-url origin git@101.42.250.169:robodyno/robodyno.git
    - git config --global user.email "${CI_EMAIL}"
    - git config --global user.name "${CI_USERNAME}"
    - VERSION=$(grep -oP '^## \[\K[0-9]+\.[0-9]+\.[0-9]+' CHANGELOG.md | head -n 1)
    - mike deploy --push --update-aliases $VERSION latest

push-to-github:
  stage: deploy
  tags:
    - docker
  only:
    - main
  image: ubuntu:latest
  before_script:
    - apt-get clean
    - apt-get update -y && apt-get install -y openssh-client git
    - mkdir -p /root/.ssh && chmod 700 /root/.ssh
    - echo "$SSH_PRIVATE_KEY" > /root/.ssh/id_rsa
    - chmod 600 /root/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-keyscan github.com >> /root/.ssh/known_hosts
    - ssh-add /root/.ssh/id_rsa
  script:
    - git config --global user.email "${CI_EMAIL}"
    - git config --global user.name "${CI_USERNAME}"
    - git checkout -b main || git checkout main
    - git remote set-url origin ${GITHUB_REPO}
    - git push --force origin main

push-to-gitlab:
  stage: deploy
  tags:
    - docker
  only:
    - main
  image: ubuntu:latest
  before_script:
    - apt-get clean
    - apt-get update -y && apt-get install -y openssh-client git
    - mkdir -p /root/.ssh && chmod 700 /root/.ssh
    - echo "$SSH_PRIVATE_KEY" > /root/.ssh/id_rsa
    - chmod 600 /root/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-keyscan gitee.com >> /root/.ssh/known_hosts
    - ssh-add /root/.ssh/id_rsa
  script:
    - git config --global user.email "${CI_EMAIL}"
    - git config --global user.name "${CI_USERNAME}"
    - git checkout -b main || git checkout main
    - git remote set-url origin ${GITEE_REPO}
    - git push --force origin main
